{
	reversi.kn (for Kuin 1.00)
		Last Modified:  2013/10/19 17:20:57.
		Created by @tatt61880
			https: //twitter.com/tatt61880
			https: //github.com/tatt61880
}

var PieceTex: Draw@CTex
const PieceTexPath: []char :: "circle.kntex"

func Init(cfg: Kuin@CCfg)
	do cfg.Title :: "リバーシ"
end func

enum State
	None
	Black
	White
end enum

func CheckIndex(x: int, y: int): bool
	return (x>=0 & y>=0 & x<=7 & y<=7)
end func

func ReverseOneLine(x0: int, y0: int, dx: int, dy: int, p: @State, board: [][]@State, checkonly: bool): int
	var opponent: @State :: p = @State#Black ?(@State#White, @State#Black)
	var x: int :: x0 + dx
	var y: int :: y0 + dy
	if(@CheckIndex(x, y) = false)
		return 0
	end if
	if(board[x][y] <> opponent)
		return 0
	end if
	while(@CheckIndex(x, y) & board[x][y] = opponent)
		do x :+ dx
		do y :+ dy
	end while
	if(@CheckIndex(x, y) = false | board[x][y] <> p)
		return 0
	end if
	if(checkonly)
		return 1
	end if

	do x :- dx
	do y :- dy
	var num: int :: 0
	while(x <> x0 | y <> y0)
		do board[x][y] :: p
		do num :+ 1
		do x :- dx
		do y :- dy
	end while
	return num
end func

func PutPiece(x: int, y: int, p: @State, board: [][]@State, checkonly: bool): int
	if(@CheckIndex(x, y) = false | board[x][y] <> @State#None)
		return 0
	end if
	var n: int :: 0
	for dx(-1, 1)
		for dy(-1, 1)
			if(dx = 0 & dy = 0)
				continue dy
			end if
			do n :+ @ReverseOneLine(x, y,dx,dy, p, board, checkonly)
		end for
	end for
	return n
end func

func CheckPass(p: @State, board: [][]@State): bool
	for i(0, 7)
		for j(0, 7)
			if(@PutPiece(i, j, p, board, true) <> 0)
				return false
			end if
		end for
	end for
	return true
end func

func GetRGB(r: &float, g: &float, b: &float, s: @State)
	switch(s)
	case(@State#None)
		do r::0.0
		do g::0.8
		do b::0.0
	case(@State#Black)
		do r::0.0
		do g::0.0
		do b::0.0
	case(@State#White)
		do r::0.95
		do g::0.95
		do b::0.95
	end switch
end func

func DrawPiece(x: int, y: int, s: @State)
	var r: float
	var g: float
	var b: float
	do @GetRGB(&r, &g, &b, s)
	var x0: float :: (x * 100)$ float + 4.0
	var y0: float :: (y * 100)$ float + 4.0
	do Draw@Rect(x0, y0, 96.0, 96.0, 0.0, 0.8, 0.0, 1.0)
	if(s <> @State#None)
		do @PieceTex.DrawScale(0.0, 0.0, @PieceTex.Width(), @PieceTex.Height(), x0 + 3.0 , y0 + 3.0, 90.0, 90.0, r, g, b, 1.0)
	end if
end func

func ShowBoard(board: [][]@State)
	for x(0, 7)
		for y(0, 7)
			do @DrawPiece(x, y, board[x][y])
		end for
	end for
end func

func ShowNext(player: @State)
	var r: float
	var g: float
	var b: float
	do @GetRGB(&r, &g, &b, player)
	var x: float :: 800.0 + (player$ int)$ float * 200.0 - 150.0
	var y: float :: 300.0
	do @PieceTex.DrawScale(0.0, 0.0, @PieceTex.Width(), @PieceTex.Height(), x, y, 200.0, 200.0, r, g, b, 1.0)
end func

func ShowScores(score: []int)
	var s: @State
	do s :: @State#Black
	do ShowScore(4, 820, s, score[s$ int])
	do s :: @State#White
	do ShowScore(4, 840, s, score[s$ int])
	func ShowScore(x: int, y: int, s: @State, score: int)
		var r: float
		var g: float
		var b: float
		do @GetRGB(&r, &g, &b, s)
		for i(0, score-1)
			do Draw@Rect((x+i*20)$ float, y$ float, 19$ float, 19$ float, r, g, b, 1.0)
		end for
	end func
end func

func Main()
	do @PieceTex :: Draw@LoadTex(@PieceTexPath)
	var board: [][]@State :: #[8][]@State
	for i(0, 7)
		do board[i] :: #[8]@State
	end for
	{ Init }
	do board[3][3] :: @State#White
	do board[3][4] :: @State#Black
	do board[4][3] :: @State#Black
	do board[4][4] :: @State#White
	var score: []int :: #[3]int
	do score[1] :: 2
	do score[2] :: 2

	var input_x: float
	var input_y: float
	var reversedNum: int
	var player: @State :: @State#Black
	while()
		do Kuin@Act()
		{ Background }
		do Draw@Rect(0.0, 0.0, 1600.0, 900.0, 0.45, 0.55, 1.0, 1.0)
		do Draw@Rect(0.0, 0.0, 804.0, 804.0, 0.5, 0.5, 0.5, 1.0)
		do input_x :: Input@MouseX()
		do input_y :: Input@MouseY()
		do input_x :/ 100.0
		do input_y :/ 100.0
		if(Input@Mouse(Input@EMouse#Left) = 1)
			do reversedNum :: @PutPiece(input_x$ int, input_y$ int, player, board, false)
			if(reversedNum > 0)
				do board[input_x$ int][input_y$ int] :: player
				do score[player$ int] :+ reversedNum + 1
				var opponent: @State :: player = @State#Black ?(@State#White, @State#Black)
				do score[opponent$ int] :- reversedNum
				do Dbg@Log("(b, w) = (" ~ score[1].ToStrF("2d") ~ ", " ~ score[2].ToStrF("2d") ~ ")")

				if(@CheckPass(opponent, board))
					if(@CheckPass(player, board))
						do Dbg@Log("Fin.")
					else
						do Dbg@Log("Pass.")
					end if
				else
					do player :: opponent
				end if
			end if
		end if
		do @ShowBoard(board)
		do @ShowNext(player)
		do @ShowScores(score)
	end while
end func

